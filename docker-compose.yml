services:
  gateway-service:
    build:
      context: ./gateway-service
    image: adottato/gateway-service:latest
    restart: always
    ports:
      - "8090:8090"
    env_file:
      - env/.env.shared
      - env/.env.secret
    environment:
      SERVER_PORT: 8090
    networks:
      - app_network

  adoption-post-service:
    build:
      context: .
      dockerfile: adoption-post-service/Dockerfile
    image: adottato/adoption-post-service:latest
    restart: always
    depends_on:
      - postgres-db-adottato
    ports:
      - "8081:8081"
    env_file:
      - env/.env.shared
    environment:
      SERVER_PORT: 8081
      RABBITMQ_NEW_POST_ROUTING_KEY: post.new
      RABBITMQ_CHAT_REQUEST_ACCEPTED_ROUTING_KEY: chat.request.accepted
      RABBITMQ_ADOPTION_POST_QUEUE_CHAT: adoptionpost.queue.requestaccepted
    networks:
      - app_network

  chat-service:
    build:
      context: ./chat-service
    image: adottato/chat-service:latest
    restart: always
    depends_on:
      - postgres-db-adottato
    ports:
      - "8082:8082"
    env_file:
      - env/.env.shared
    environment:
      RABBITMQ_CHAT_NOTIFICATION_ROUTING_KEY: chat.notification
      RABBITMQ_CHAT_REQUEST_ACCEPTED_ROUTING_KEY: chat.request.accepted
    networks:
      - app_network

  user-service:
    build:
      context: ./user-service
    image: adottato/user-service:latest
    restart: always
    depends_on:
      - postgres-db-adottato
    ports:
      - "8083:8083"
    env_file:
      - env/.env.shared
      - env/.env.secret
    environment:
      SERVER_PORT: 8083
    networks:
      - app_network

  saved-search-service:
    build:
      context: .
      dockerfile: saved-search-service/Dockerfile
    image: adottato/saved-search-service:latest
    restart: always
    depends_on:
      - postgres-db-adottato
    ports:
      - "8084:8084"
    env_file:
      - env/.env.shared
    environment:
      SERVER_PORT: 8084
      RABBITMQ_SAVED_SEARCH_QUEUE: savedsearch.queue
      RABBITMQ_NEW_POST_ROUTING_KEY: post.new
      RABBITMQ_SAVEDSEARCH_MATCH: savedsearch.match
    networks:
      - app_network

  email-service:
    build:
      context: ./email-service
    image: adottato/email-service:latest
    restart: always
    depends_on:
      - postgres-db-adottato
      - rabbitmq
    ports:
      - "8085:8085"
    env_file:
      - env/.env.shared
      - env/.env.secret
    environment:
      SERVER_PORT: 8085
      USER_SERVICE_URL: http://user-service:8083
      RABBITMQ_EMAIL_QUEUE_CHAT: email.queue.chat
      RABBITMQ_EMAIL_QUEUE_SAVED_SEARCH: email.queue.savedsearch
      RABBITMQ_CHAT_NOTIFICATION_ROUTING_KEY: chat.notification
      RABBITMQ_SAVED_SEARCH_ROUTING_KEY: savedsearch.match
    networks:
      - app_network

  frontend:
    build: ./frontend
    image: adottato/frontend:latest
    restart: always
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      INTERNAL_API_BASE: "http://gateway-service:8090"
    depends_on:
      - gateway-service
    networks:
      - app_network

  postgres-db-adottato:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_DB: postgres_db
      POSTGRES_USER: app_user
      POSTGRES_PASSWORD: app_password
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    networks:
      - app_network

  pgadmin-adottato:
    image: dpage/pgadmin4
    restart: always
    depends_on:
      - postgres-db-adottato
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: password
    ports:
      - "5051:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./pgadmin-config/servers.json:/pgadmin4/servers.json:ro
      - ./pgadmin-config/.pgpass:/pgpass:ro
    networks:
      - app_network

  rabbitmq:
    image: rabbitmq:3.11-management
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "15672:15672"
    networks:
      - app_network

volumes:
  db_data:
  pgadmin_data:
  rabbitmq_data:

networks:
  app_network:
